@inject IGetProductByIdUseCase GetProductByIdUseCase
@inject ISellProductUseCase SellProductUseCase

@if (productToSell != null)
{
    @if (!string.IsNullOrWhiteSpace(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }

<EditForm Model="SelectedProduct" OnValidSubmit="SellProduct">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <div class="form-group">
        <label for="name">Product name</label>
        <input class="form-control" id="name" type="text" readonly value="@productToSell.Name" />
    </div>
    <div class="form-group">
        <label for="price">Price</label>
        <input class="form-control" id="price" type="text" readonly value="@(string.Format("{0:c}", productToSell.Price))" />
    </div>
    <div class="form-group">
        <label for="quantity">Quantity</label>
        <InputNumber class="form-control" id="quantity" @bind-Value="@productToSell.Quantity"></InputNumber>
    </div>
    <button type="submit" class=" btn btn-primary">Sell</button>
</EditForm>
    
}

@code {
    private Product productToSell;
    private string errorMessage;

    //For now I let the cashier to enter his/her name. Later, he/she will use the authorization
    [Parameter]
    public string CashierName { get; set; }

    [Parameter]
    public Product SelectedProduct { get; set; }

    [Parameter]
    public EventCallback<Product> OnProductSold { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (SelectedProduct != null)
        {
            productToSell = new Product
                {
                    ProductId = SelectedProduct.ProductId,
                    Name = SelectedProduct.Name,
                    CategoryId = SelectedProduct.CategoryId,
                    Price = SelectedProduct.Price,
                    Quantity = 0
                };
        }
        else
        {
            productToSell = null;
        }
    }

    private void SellProduct()
    {
        if (string.IsNullOrWhiteSpace(CashierName))
        {
            errorMessage = "Cashier's name is missing, cannot sell product";
            return;
        }

        var product = GetProductByIdUseCase.Execute(productToSell.ProductId);

        if (productToSell.Quantity <= 0)
        {
            errorMessage = "The Quantity has to be greater than zero";
        }
        else if (product.Quantity >= productToSell.Quantity)
        {
            OnProductSold.InvokeAsync(productToSell);
            errorMessage = string.Empty;
            SellProductUseCase.Execute(productToSell.ProductId, productToSell.Quantity.Value, CashierName);
        }
        else
        {
            errorMessage = $"{product.Name} only has {product.Quantity} left";
        }
    }

}
